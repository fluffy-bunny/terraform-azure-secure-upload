name: Deploy DotNet project to Azure Function App

on:
  [push]

env:
  SHORT_NAME: secureupload  
  LOCATION: 'eastus2'
  STORAGE_ACCOUNT_NAME: stsecureupload
  CONTAINER_NAME: intake
  VAULT_NAME: 'kv-tf-stsecureupload'           
  my_value: Hi  
  TEST_WITH_VALUE: ${{ secrets.TEST_WITH_VALUE }}
  RUN_LOCAL: ${{ secrets.RUN_LOCAL }}     
jobs:
  Setup-Azure-Terraform-Backend-State-Management:
    runs-on: ubuntu-latest
    steps:

    - name: 'Dump Environment Variables'
      if:  github.actor == 'nektos/act' && env.RUN_LOCAL == 'true'
      shell: bash
      run: |
        echo 'env.my_value:               '${{ env.my_value }}
        echo 'env.does_not_exit:          '${{ env.does_not_exit }}
        echo 'env.TEST_WITH_VALUE:        '${{ env.TEST_WITH_VALUE }}
        echo 'secrets.TEST_WITH_VALUE:    '${{ secrets.TEST_WITH_VALUE }}
        echo 'secrets.TEST:               '${{ secrets.TEST }}
        echo 'secrets.AZURE_CREDENTIALS:  '${{ secrets.AZURE_CREDENTIALS }}

    - name: 'install az cli'
      if: github.actor == 'nektos/acts'
      shell: bash
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | bash
    
    - name: 'az login'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Azure Terraform Setup
      id: tfsetup
      uses: fluffy-bunny/action-docker-azure-terraform-setup@v0.1-alpha
      with:
        shortName: ${{ env.SHORT_NAME }}
        location: ${{ env.LOCATION }}
        creds: ${{ secrets.AZURE_CREDENTIALS }}


    - name: 'Checkout GitHub Action'
      uses: actions/checkout@master

    - name: Generate build number
      id: buildnumber
      uses: einaregilsson/build-number@v2 
      with:
        token: ${{secrets.github_token}} 

    # Now you can pass ${{ steps.buildnumber.outputs.build_number }} to the next steps.
    - name: Display build number
      uses: actions/hello-world-docker-action@v1
      with:
        who-to-greet: ${{ steps.buildnumber.outputs.build_number }}

    - name: 'Install Terraform'
      shell: bash
      run: |
        pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        sudo apt-get install wget unzip
        if [ -f "terraform" ] 
        then
          echo "File terraform exists." 
          rm terraform
        fi
        wget https://releases.hashicorp.com/terraform/0.12.24/terraform_0.12.24_linux_amd64.zip
        unzip terraform_0.12.24_linux_amd64.zip 
        sudo cp terraform /usr/local/bin
        sudo chmod +x /usr/local/bin
        terraform --version 
        popd
        
    - name: 'Terraform Init'
      shell: bash
      run: |
        pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        echo 'export ARM_ACCESS_KEY=$(az keyvault secret show --name ${{ steps.tfsetup.outputs.secret_name }} --vault-name ${{ steps.tfsetup.outputs.keyvault_name }} --query value -o tsv)'
        export ARM_ACCESS_KEY=$(az keyvault secret show --name ${{ steps.tfsetup.outputs.secret_name }} --vault-name ${{ steps.tfsetup.outputs.keyvault_name }} --query value -o tsv)
        export ARM_CLIENT_ID='${{secrets.ARM_CLIENT_ID}}'
        export ARM_CLIENT_SECRET='${{secrets.ARM_CLIENT_SECRET}}'
        export ARM_SUBSCRIPTION_ID=$(az account show --query id | xargs)
        export ARM_TENANT_ID=$(az account show --query tenantId | xargs)
        ls
        cd src/
        terraform init 
        popd

    - name: 'Terraform Plan'
      shell: bash
      run: |
        pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        export ARM_ACCESS_KEY=$(az keyvault secret show --name ${{ steps.tfsetup.outputs.secret_name }} --vault-name ${{ steps.tfsetup.outputs.keyvault_name }} --query value -o tsv)
        export ARM_CLIENT_ID='${{secrets.ARM_CLIENT_ID}}'
        export ARM_CLIENT_SECRET='${{secrets.ARM_CLIENT_SECRET}}'
        export ARM_SUBSCRIPTION_ID=$(az account show --query id | xargs)
        export ARM_TENANT_ID=$(az account show --query tenantId | xargs)
        ls
        cd src/
        terraform plan -out=tf.plan
        popd
  
    - name: 'Terraform Apply'
      shell: bash
      run: |
        pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        export ARM_ACCESS_KEY=$(az keyvault secret show --name ${{ steps.tfsetup.outputs.secret_name }} --vault-name ${{ steps.tfsetup.outputs.keyvault_name }} --query value -o tsv)
        export ARM_CLIENT_ID='${{secrets.ARM_CLIENT_ID}}'
        export ARM_CLIENT_SECRET='${{secrets.ARM_CLIENT_SECRET}}'
        export ARM_SUBSCRIPTION_ID=$(az account show --query id | xargs)
        export ARM_TENANT_ID=$(az account show --query tenantId | xargs)
        ls
        cd src/
        terraform apply tf.plan
        popd 

    - name: 'Install AzCopy'
      shell: bash
      run: |
        pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        sudo apt-get install wget unzip
        if [ -d "azcopy_linux_amd64_10.3.4" ] 
        then
          echo "Directory azcopy_linux_amd64_10.3.4 exists." 
          rm -r azcopy_linux_amd64_10.3.4
        fi
        if [ -f "/usr/local/bin/azcopy" ] 
        then
          echo "File /usr/local/bin/azcopy exists." 
           sudo rm /usr/local/bin/azcopy
        fi

        # wget https://aka.ms/downloadazcopy-v10-linux
        # tar -xvf downloadazcopy-v10-linux
        tar -xvf azcopy_linux_amd64_10.3.4.tar.gz
        sudo cp ./azcopy_linux_amd64_*/azcopy /usr/local/bin/
        sudo chmod +x /usr/local/bin
        sudo azcopy --version
        popd

    - name: 'Copy Files To Azure Storage'
      shell: bash
      run: |
        pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        stName=${{ env.STORAGE_ACCOUNT_NAME }}
        cntrName=${{ env.CONTAINER_NAME }}
        bldNum=${{ steps.buildnumber.outputs.build_number }}

        sudo chmod 777 ./gen-sas-for-azcopy.sh
        AZURE_STORAGE_SAS_TOKEN=$(./gen-sas-for-azcopy.sh $stName $cntrName)
        sudo azcopy cp "upload" "https://stsecureupload.blob.core.windows.net/intake/v001/$bldNum/?$AZURE_STORAGE_SAS_TOKEN" --recursive=true --put-md5
        popd
    

       